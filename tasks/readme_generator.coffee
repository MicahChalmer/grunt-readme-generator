#
# * grunt-readme-generator
# * https://github.com/aponxi/grunt-readme-generator
# *
# * Copyright (c) 2013 Logan Howlett
# * Licensed under the MIT license.
# 
"use strict"
module.exports = (grunt) ->
  pkg = require("./package.json")
  # Please see the Grunt documentation for more information regarding task
  # creation: http://gruntjs.com/creating-tasks
  
  # helper functions
  make_anchor = (string) ->
    #  make convert a string like "Special Thanks" to "special-thanks"
    str = string.replace(/\s+/g, '-').toLowerCase()
    str = "#"+str

  back_to_top = () ->
    str = make_anchor pkg.name
    str += "-"
    result = "[Back To Top](#{str})"

  get_latest_changelog = (prefix, changelog_folder)->
    #  get the latest changelog file and print it to the readme
    # todo: what if the extension is .markdown or something else...
    # currently only .md extensions are supported
    versions_found = []
    grunt.file.recurse changelog_folder, (abspath, rootdir, subdir, filename) ->
      if filename.substring(0,prefix.length) is prefix
        # -3 is for .md part
        version = filename.slice(prefix.length,-3)
        versions_found.push version
    if versions_found.length > 0
      versions_found.sort()
      latest = versions_found[versions_found.length -1]
      latest
    else
      grunt.fail.error "No changelogs are present. Please write a changelog file or fix prefixes."
      false


  generate_banner = (path, banner_file, output) ->
    f = path+"/"+banner_file
    unless grunt.file.exists f
      grunt.fail.error "Source file \"" + f + "\" not found."
    else
      grunt.file.write output, grunt.file.read f


  generate_TOC = (files, toc_extra_links, output, changelog_insert_before) ->
    grunt.file.write output, "## Jump to Section\n\n"
    for file, title of files
      if file is changelog_insert_before
        # release history is generated specially since the latest-changelog is generated dynamically.
        release_title = make_anchor "Release History"
        grunt.file.write output, "* [#Release History](#{release_title})\n"
      link = make_anchor title
      grunt.file.write output, "* [#{title}](#{link})\n"

    
    if toc_extra_links.length > 0
      for i in toc_extra_links
        ex = toc_extra_links[i]
        grunt.file.write output, "* #{ex}\n"
      
  generate_title = (output, travis, username) ->
    title = pkg.name
    desc = pkg.description
    grunt.file.write output, "# #{title} "

    if travis
      tra = "[![Build Status](https://secure.travis-ci.org/#{username}/#{title}.png?branch=master)](http://travis-ci.org/#{username}/#{title})"
      grunt.file.write output, "#{tra}"
    grunt.file.write output, "\n> #{desc}\n"

  append = (path, file, title, output) ->
    grunt.file.write output, "## #{title}\n"
    top = back_to_top()
    grunt.file.write output, "#{top}\n\n"
    f = path+"/"+file
    unless grunt.file.exists f
      grunt.fail.error "Source file \"" + f + "\" not found."
    else
      grunt.file.write output, grunt.file.read f 

  generate_release_history = (prefix, changelog_folder, output) ->

    grunt.file.write output, "## Release History\n"
    top = back_to_top()
    grunt.file.write output, "#{top}\n\n"
    grunt.file.write output, "You can find [all the changelogs here](./#{changelog_folder}).\n"
    latest = get_latest_changelog prefix, changelog_folder
    # todo: only supporting .md format at the moment.
    latest_file = prefix + latest + ".md"
    grunt.file.write output, "### Latest changelog is for [#{latest}](#{changelog_folder}/latest_file):"
    unless grunt.file.exists latest_file
      grunt.fail.error "Changelog file \"" + latest_file + "\" not found."
    else
      grunt.file.write output, grunt.file.read latest_file 


  generate_footer = (output) ->
    date = new Date();
    str = "--------\nThis readme has been automatically generated by [readme generator](https://github.com/aponxi/grunt-readme-generator) on #{date}."
    grunt.file.write output, str


  grunt.registerMultiTask "readme_generator", "Generate Readme File", ->
    
    # Merge task-specific and/or target-specific options with these defaults.
    options = @options(
      github_username: "aponxi" # this is mainly for travis link
      output: "README.md" # where readme file should be generated in respect to Gruntfile location
      table_of_contents: on # generate table of contents
      readme_folder: "readme" # where readme partial files are located
      changelog_folder: "changelogs" # where changelog files are located
      changelog_version_prefix: "v" # under changelog folder, there are files like v0.1.0.md if the prefix is "V"
      changelog_insert_before: "legal.md" # I like my legal stuff at the bottom of the readme
      toc_extra_links: [] # Sometimes I like adding quicklinks on the top in table of contents. Table of contents (TOC) must be enabled for this option
      banner: null # I like some ascii art on the top of the readme
      has_travis: on # I use travis a lot and want to have the travis image generated on the top
    )
    
    # generate banner
    if options.banner?
      generate_banner options.readme_folder, options.banner


    # Iterate over all specified file groups.
    @files.forEach (f) ->
      console.log "src", f.src
      console.log "dest", f.dest
      
      
      # Print a success message.
      grunt.log.writeln "File \"" + f.dest + "\" created."

