// Generated by CoffeeScript 1.6.2
"use strict";module.exports = function(grunt) {
  var append, back_to_top, generate_TOC, generate_banner, generate_footer, generate_release_history, generate_title, get_latest_changelog, make_anchor, pkg;

  pkg = require("./package.json");
  make_anchor = function(string) {
    var str;

    str = string.replace(/\s+/g, '-').toLowerCase();
    return str = "#" + str;
  };
  back_to_top = function() {
    var result, str;

    str = make_anchor(pkg.name);
    str += "-";
    return result = "[Back To Top](" + str + ")";
  };
  get_latest_changelog = function(prefix, changelog_folder) {
    var latest, versions_found;

    versions_found = [];
    grunt.file.recurse(changelog_folder, function(abspath, rootdir, subdir, filename) {
      var version;

      if (filename.substring(0, prefix.length) === prefix) {
        version = filename.slice(prefix.length, -3);
        return versions_found.push(version);
      }
    });
    if (versions_found.length > 0) {
      versions_found.sort();
      latest = versions_found[versions_found.length(-1)];
      return latest;
    } else {
      grunt.fail.error("No changelogs are present. Please write a changelog file or fix prefixes.");
      return false;
    }
  };
  generate_banner = function(path, banner_file, output) {
    var f;

    f = path + "/" + banner_file;
    if (!grunt.file.exists(f)) {
      return grunt.fail.error("Source file \"" + f + "\" not found.");
    } else {
      return grunt.file.write(output, grunt.file.read(f));
    }
  };
  generate_TOC = function(files, toc_extra_links, output, changelog_insert_before) {
    var ex, file, i, link, release_title, title, _i, _len, _results;

    grunt.file.write(output, "## Jump to Section\n\n");
    for (file in files) {
      title = files[file];
      if (file === changelog_insert_before) {
        release_title = make_anchor("Release History");
        grunt.file.write(output, "* [#Release History](" + release_title + ")\n");
      }
      link = make_anchor(title);
      grunt.file.write(output, "* [" + title + "](" + link + ")\n");
    }
    if (toc_extra_links.length > 0) {
      _results = [];
      for (_i = 0, _len = toc_extra_links.length; _i < _len; _i++) {
        i = toc_extra_links[_i];
        ex = toc_extra_links[i];
        _results.push(grunt.file.write(output, "* " + ex + "\n"));
      }
      return _results;
    }
  };
  generate_title = function(output, travis, username) {
    var desc, title, tra;

    title = pkg.name;
    desc = pkg.description;
    grunt.file.write(output, "# " + title + " ");
    if (travis) {
      tra = "[![Build Status](https://secure.travis-ci.org/" + username + "/" + title + ".png?branch=master)](http://travis-ci.org/" + username + "/" + title + ")";
      grunt.file.write(output, "" + tra);
    }
    return grunt.file.write(output, "\n> " + desc + "\n");
  };
  append = function(path, file, title, output) {
    var f, top;

    grunt.file.write(output, "## " + title + "\n");
    top = back_to_top();
    grunt.file.write(output, "" + top + "\n\n");
    f = path + "/" + file;
    if (!grunt.file.exists(f)) {
      return grunt.fail.error("Source file \"" + f + "\" not found.");
    } else {
      return grunt.file.write(output, grunt.file.read(f));
    }
  };
  generate_release_history = function(prefix, changelog_folder, output) {
    var latest, latest_file, top;

    grunt.file.write(output, "## Release History\n");
    top = back_to_top();
    grunt.file.write(output, "" + top + "\n\n");
    grunt.file.write(output, "You can find [all the changelogs here](./" + changelog_folder + ").\n");
    latest = get_latest_changelog(prefix, changelog_folder);
    latest_file = prefix + latest + ".md";
    grunt.file.write(output, "### Latest changelog is for [" + latest + "](" + changelog_folder + "/latest_file):");
    if (!grunt.file.exists(latest_file)) {
      return grunt.fail.error("Changelog file \"" + latest_file + "\" not found.");
    } else {
      return grunt.file.write(output, grunt.file.read(latest_file));
    }
  };
  generate_footer = function(output) {
    var date, str;

    date = new Date();
    str = "--------\nThis readme has been automatically generated by [readme generator](https://github.com/aponxi/grunt-readme-generator) on " + date + ".";
    return grunt.file.write(output, str);
  };
  return grunt.registerMultiTask("readme_generator", "Generate Readme File", function() {
    var options;

    options = this.options({
      github_username: "aponxi",
      output: "README.md",
      table_of_contents: true,
      readme_folder: "readme",
      changelog_folder: "changelogs",
      changelog_version_prefix: "v",
      changelog_insert_before: "legal.md",
      toc_extra_links: [],
      banner: null,
      has_travis: true
    });
    if (options.banner != null) {
      generate_banner(options.readme_folder, options.banner);
    }
    return this.files.forEach(function(f) {
      console.log("src", f.src);
      console.log("dest", f.dest);
      return grunt.log.writeln("File \"" + f.dest + "\" created.");
    });
  });
};
