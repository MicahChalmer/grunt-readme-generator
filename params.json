{"name":"Grunt-readme-generator","tagline":"A grunt task to generate a dynamic readme.md from partial markdown files in readme folder.","body":"                                  _                \r\n                                 (_)               \r\n      __ _ _ __   ___  _ __ __  ___                \r\n     / _` | '_ \\ / _ \\| '_ \\\\ \\/ / |               \r\n    | (_| | |_) | (_) | | | |>  <| |               \r\n     \\__,_| .__/ \\___/|_| |_/_/\\_\\_|               \r\n          | |                                      \r\n          |_|                                      \r\n        ______               ____  ___                 \r\n        | ___ \\             | |  \\/  |                 \r\n        | |_/ /___  __ _  __| | .  . | ___             \r\n        |    // _ \\/ _` |/ _` | |\\/| |/ _ \\            \r\n        | |\\ \\  __/ (_| | (_| | |  | |  __/            \r\n        \\_| \\_\\___|\\__,_|\\__,_\\_|  |_/\\___|            \r\n                                                       \r\n                                                       \r\n             _____                           _             \r\n            |  __ \\                         | |            \r\n            | |  \\/ ___ _ __   ___ _ __ __ _| |_ ___  _ __ \r\n            | | __ / _ \\ '_ \\ / _ \\ '__/ _` | __/ _ \\| '__|\r\n            | |_\\ \\  __/ | | |  __/ | | (_| | || (_) | |   \r\n             \\____/\\___|_| |_|\\___|_|  \\__,_|\\__\\___/|_|   \r\n                                                           \r\n                                                   \r\n# Grunt ReadMe Generator \r\n\r\n> A grunt task to generate a dynamic readme.md from partial markdown files in readme folder.\r\n\r\n## Jump to Section\r\n\r\n* [Getting Started](#getting-started)\r\n* [Usage](#usage)\r\n* [Options](#options)\r\n* [Release History](#release-history)\r\n* [Legal Mambo Jambo](#legal-mambo-jambo)\r\n* [Tip Me ![](http://i.imgur.com/C0P9DIx.gif?1)](https://www.gittip.com/aponxi/)\r\n* [Donate Me! ![](http://i.imgur.com/2tqfhMO.png?1)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VBUW4M9LKTR62)\r\n\r\n## Getting Started\r\n[[Back To Top]](#grunt-readme-generator)\r\n\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-readme-generator --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-readme-generator');\r\n```\r\n\r\n## Usage\r\n[[Back To Top]](#grunt-readme-generator)\r\n\r\nIn your project's Gruntfile, add a section named `readme_generator` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  pkg: grunt.file.readJSON('package.json'),\r\n  readme_generator: {\r\n    options: {\r\n      // Task-specific options go here.\r\n      // detailed explanation is under options\r\n      readme_folder: \"readme\",\r\n      output: \"README.md\",\r\n      table_of_contents: true,\r\n      toc_extra_links: [],\r\n      generate_changelog: false,\r\n      changelog_folder: \"changelogs\",\r\n      changelog_version_prefix: \"\",\r\n      changelog_insert_before: \"\",\r\n      banner: null,\r\n      has_travis: true,\r\n      github_username: \"aponxi\",\r\n      generate_footer: true,\r\n      generate_title: true,\r\n      package_name: \"\",\r\n      package_desc: \"\",\r\n      informative: true\r\n    },\r\n    order: {\r\n      // Title of the piece and the File name goes here\r\n      // like so\r\n      \"installation.md\": \"Installation\",\r\n      \"usage.md\": \"Usage\",\r\n      \"options.md\": \"Options\",\r\n      \"example.md\": \"Example\",\r\n      \"output.md\": \"Example Output\",\r\n      \"building-and-testing.md\": \"Building and Testing\",\r\n      \"legal.md\": \"Legal Mambo Jambo\"\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n- You provide with markdown files and the titles in the `order` object which has the format of `file : title`\r\n- It generates the readme by iterating through that array in the given order\r\n- In the example `\"building-and-testing.md\": \"Building and Testing\"` it is going to create a section called `Building and Testing`, making it a title; then it will read `building-and-testing.md` file from the readme directory set in `readme_folder` option and insert it after the title. \r\n- Meaning that you shouldn't have titles in your seperate markdown files or in `building-and-testing.md` for the above example. They are automatically generated from the title.\r\n\r\nTo test use `grunt test` command and look at the outputs under `test/` folder.\r\n\r\n## Options\r\n[[Back To Top]](#grunt-readme-generator)\r\n\r\n\r\n### Notes on the features\r\n\r\n- Every folder name you provide is relative to the Gruntfile location, which is the root of your project\r\n- If you see on/off yes/no that is true/false in CoffeeScript\r\n- This readme has been generated by this plugin. Therefore the [readme folder](/readme) and the [Gruntfile](/Gruntfile.js) or [Gruntfile.coffee](/Gruntfile.coffee) of this project are great examples. Also you can check out the [test folder](/test) folder.\r\n\r\n#### readme_folder \r\n> the folder where readme partial files are located\r\n\r\n- This is the folder where markdown files are located. These markdown files can have any file extension and will be appended into the README.MD file that will be generated.\r\n- As an example I use \"/readme\" folder in my project directory and it has \"banner.md\", \"legal.md\", \"options.md\" etc. as seen under [readme folder](/readme).\r\n\r\n```coffee\r\nreadme_folder: \"readme\" \r\n```\r\n#### output\r\n> where readme file should be generated in respect to Gruntfile location\r\n\r\n- You can name your generated readme file here.\r\n- You can also provide a location which will be in respect to the root of the project\r\n- For example I did `/test/readme_no_banner.md` to generate a readme with the banner option off to test, amongst other readme files.\r\n- This is good to have when you are working with multiple generated markdown files.\r\n- A good example can be seen on the [Gruntfile](/Gruntfile.js) or the default is:\r\n\r\n```coffee\r\noutput: \"README.md\" \r\n```\r\n\r\n#### table_of_contents\r\n> generate automatic table of contents\r\n\r\n- This generates automatic table of contents\r\n- After each title for a _section_ it will generate _Back To Top_ links to navigate to the top\r\n- This is either on/off (coffeescript) or true/false (javascript)\r\n- Default is on\r\n\r\n```coffee\r\ntable_of_contents: on\r\n```\r\n\r\n#### toc_extra_links\r\n> Sometimes I like adding quick-links on the top in table of contents. Table of contents (TOC) must be enabled for this option to matter\r\n\r\n- This adds extra links to the table of contents\r\n- The need for this was to add a donation link, or link to issues page. Which is something that doesn't belong anywhere else than some navigation bar.\r\n- You supply it with an array of the exact text you want on there. It copy pastes exactly what's written, doesn't auto-formats like it does when generating the table of contents from files provided.\r\n- What I use for my purposes is donation links and they are like so:\r\n\r\n```coffee\r\ntoc_extra_links: [\r\n    \"[Tip Me ![](http://i.imgur.com/C0P9DIx.gif?1)](https://www.gittip.com/aponxi/)\"\r\n    \"[Donate Me! ![](http://i.imgur.com/2tqfhMO.png?1)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VBUW4M9LKTR62)\"\r\n    ]\r\n```\r\n\r\n- However, it is an empty array by default\r\n\r\n```coffee\r\ntoc_extra_links: [] \r\n```\r\n\r\n#### generate_changelog\r\n> generates automatic changelog\r\n\r\n- This feature adds the latest changelog from the folder that you write your markdown formatted changelog files and inserts it in the readme file. I usually have so many logs that I just want to add the latest changes in the Readme file.\r\n- It sorts the changelog files found alphabetically to tell which one is the newest\r\n- Check out [changelogs folder](/changelogs) folder to reference formatting \r\n- Files can have a prefix if you want to eliminate old changelogs from being processed. To do so refer to the [changelog_version_prefix](#changelog_version_prefix) option.\r\n- Usually files are named such as `0.1.2.md`, `0.11.0.markdown`, `1.0.0.mdown` etc\r\n- This feature is either `on` or `off` (true/false for javascript)\r\n- *Important:* If this feature is on, then you must have some changelog files under your changelog folder\r\n- By default it is `off`:\r\n\r\n```coffee\r\ngenerate_changelog: off \r\n```\r\n\r\n#### changelog_folder\r\n> where changelog files are located\r\n\r\n- If you keep your changelogs in a folder, specify it here\r\n- It is a string of the folder name in respect to the project root\r\n- Some examples would be `test/changelogs`, `changelog`, `release_history`, `docs/changelog` etc.\r\n- By default it is `changelogs` folder\r\n\r\n```coffee\r\nchangelog_folder: \"changelogs\" \r\n```\r\n\r\n#### changelog_version_prefix\r\n> under changelog folder, there are files like v0.1.0.md if the prefix is \"V\"\r\n\r\n- As I've mentioned above, this is a rule for targeting only prefixed changelogs.\r\n- If you have `_2.4.3.md` in there for some reason and other changelogs as `v2.4.2.md`, `v2.4.3.md` you could easily include only those two files by setting prefix to `\"v\"`. It would only look for files that start with `v` and sort from those.\r\n\r\n```coffee\r\nchangelog_version_prefix: \"\" \r\n```\r\n\r\n#### changelog_insert_before\r\n> I like my legal stuff at the bottom of the readme and release history before that\r\n\r\n- Let's say you like sorting things a bit differently and think that Legal stuff should be at the bottom of your readme file. No worries! Just tell it to place changelogs before `legal.md`\r\n- *Important:* The file you set must be in the `order` list in the task. Meaning that it should be something that is going to be included in the readme file. If there is no `legal.md` file that will be included in the generated readme, then it will put the changelog in the end of the file.\r\n- This is separate than the `order` object you set for the task because changelog is automatically generated\r\n- Examples for this can be any file from the `order` list. For this readme I could have chosen `getting_started.md` or `usage.md` as well... But it would have been very silly.\r\n- Default is:\r\n\r\n```coffee\r\nchangelog_insert_before: \"\" \r\n```\r\n\r\n#### banner\r\n> I like some ascii art on the top of the readme\r\n\r\n- This is one of the visually enhancing features. You can supply a header for your readme files in text format.\r\n- I usually add an ascii logo of my project name. But you can provide logos, or other texts that you want to display on the top of the readme.\r\n- It should be the path of the file in respect to the readme folder.\r\n- Examples: `\"test/banner.md\"`, `\"my_header.md\"`, `\"my_plain_header.txt\"`\r\n- It accepts a string and default is:\r\n\r\n```coffee\r\nbanner: null \r\n```\r\n\r\n#### has_travis\r\n> I use travis a lot and want to have the travis image generated on the top\r\n\r\n- If you use travis, you can add the image of your master branch automatically generated with this option\r\n- If you aren't generating title automatically then this has no purpose, because it is displayed near the title.\r\n- This option is either on or off\r\n- By default:\r\n\r\n```coffee\r\nhas_travis: on\r\n```\r\n\r\n#### github_username\r\n> this is mainly for travis link\r\n\r\n- When you are using travis, your username may not be gotten from the package.json\r\n- Who knows if your username is the same as the author name, and who is to say which author you are!\r\n- Therefore, you supply it with your username to have it generate the link as `user/repo`\r\n- By default it has my username:\r\n\r\n```coffee\r\ngithub_username: \"aponxi\" \r\n```\r\n\r\n#### generate_footer\r\n> generates automatic footer that tells the time it was generated using this task\r\n\r\n- You may want to call it my watermark, and you don't have to have it there at all!\r\n- Although it would make me happy to see it there :)\r\n- This adds a small footnote saying that this readme was generated by this grunt task and when it was generated.\r\n- Example can be found on the bottom of this file (assuming that you are reading from the generated readme file and not the options.md)\r\n- It can be either on/off for CoffeeScript and true/false for Javascript\r\n- By default:\r\n\r\n```coffee\r\ngenerate_footer: on \r\n```\r\n\r\n#### generate_title\r\n> generates automatic title from package name and description\r\n\r\n- This option is related to all the travis options.\r\n- If this option is off, then travis options are disregarded.\r\n- This option gets the package name and the package description from the `package_name` and `package_desc` options if they are set. If they aren't, then it gets the package name and description from the package.json file. Then the package name and descriptions are added to the top of the readme file.\r\n- Be warned that table of contents uses the package name anchor to go to the top. So, if you aren't going to use this feature then have a title with the package_name in the readme.\r\n- If you aren't going to supply either name or description via options, then you should dd `pkg` configuration to your `grunt.initConfig` so that we can scavenge it from the package.json for you. To do so add this line under `grunt.initConfig` in your Gruntfile: \r\n\r\n```js\r\ngrunt.initConfig({\r\n    pkg: grunt.file.readJSON('package.json'),\r\n    //....\r\n```\r\n\r\n- It can be either on/off for CoffeeScript and true/false for Javascript\r\n- By default:\r\n\r\n```coffee\r\ngenerate_title: on \r\n```\r\n\r\n#### package_name\r\n> by default we get it from the package.json\r\n\r\n- `Back to top` links from `Table of Contents` uses this to generate anchors that link to the title, thus allowing to jump to the top of the page.\r\n- `Generate title` also uses this to generate the title\r\n- This option accepts a string such as `\"My Plugin Title\"`\r\n- By default it is empty, allowing the pacakge name to be gotten from package.json. To have it get it from package.json you must  add this line under `grunt.initConfig` in your Gruntfile: \r\n\r\n```js\r\ngrunt.initConfig({\r\n    pkg: grunt.file.readJSON('package.json'),\r\n    //....\r\n```\r\n\r\n- Default value:\r\n\r\n```coffee\r\npackage_name : \"\" \r\n```\r\n#### package_desc\r\n> by default we get it from package.json\r\n\r\n- `Generate title` uses this to generate the title\r\n- This option accepts a string such as `\"My Plugin Description\"`\r\n- Feel free to use any markdown formats. However, it will be added as a quote with `>` in the beginning of the description.\r\n- By default it is empty, allowing the package description to be gotten from package.json. To have it get it from package.json you must  add this line under `grunt.initConfig` in your Gruntfile: \r\n\r\n```js\r\ngrunt.initConfig({\r\n    pkg: grunt.file.readJSON('package.json'),\r\n    //....\r\n```\r\n\r\n- Default value:\r\n\r\n```coffee\r\npackage_desc : \"\" \r\n```\r\n\r\n#### informative\r\n> tell the people what's going on (verbose)\r\n\r\n- This is somewhat for verbose outputs\r\n- Informs what the task is doing \r\n- It can be either on/off, yes/no for CoffeeScript and true/false for Javascript\r\n- By default:\r\n\r\n```coffee\r\ninformative : yes \r\n```\r\n\r\n- Example output:\r\n\r\n```\r\n>> Generating banner...\r\n>> Writing package name and description...\r\n>> Engineering travis button...\r\n>> Generating table of contents...\r\n>> Adding the generation message, thank you...\r\nYour readme file \"test/readme_no_changelog.md\" is ready!\r\n```\r\n\r\n## Release History\r\n[[Back To Top]](#grunt-readme-generator)\r\n\r\nYou can find [all the changelogs here](/changelogs).\r\n\r\n### Latest changelog is for [v0.2.0.md](/changelogs/v0.2.0.md):\r\n\r\n#### v0.2.0 05/Jun/2013\r\n- Wrote the documentation\r\n- Fixed some more issues with prefix check. Now if there isn't a prefix, it sorts the files under changelog alphabetically. z0.1.0.md, and v0.1.0.md are both included in the sorting process.\r\n- changed some default options to more convenient values\r\n\r\n#### v0.2.2 05/Jun/2013\r\n- Minor typo fixes\r\n- added keywords to package\r\n- released the package\r\n\r\n## Legal Mambo Jambo\r\n[[Back To Top]](#grunt-readme-generator)\r\n\r\nCopyright © 2013 aponxi <aponxi@weaponxi.com>\r\n\r\nThis software is licensed under [MIT License](http://aponxi.mit-license.org/).\r\n\r\n\r\n\r\n--------\r\n<small>_This readme has been automatically generated by [readme generator](https://github.com/aponxi/grunt-readme-generator) on Wed Jun 05 2013 20:47:50 GMT-0400 (EDT)._</small>","google":"UA-38981905-3","note":"Don't delete this file! It's used internally to help with page regeneration."}